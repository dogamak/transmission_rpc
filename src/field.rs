use std::fmt;
use serde::{Serialize, Serializer};

/// A enum of all the names of fields in the `Torrent` struct.
/// Please see https://trac.transmissionbt.com/browser/branches/1.7x/doc/rpc-spec.txt
/// for additional information.
#[derive(Clone)]
#[allow(dead_code)]
pub enum Field {
    ActivityDate,
    AddedDate,
    AnnounceResponse,
    AnnounceURL,
    BandwidthPriority,
    Comment,
    CorruptEver,
    Creator,
    DateCreated,
    DesiredAvailable,
    DoneDate,
    DownloadDir,
    DownloadedEver,
    Downloaders,
    DownloadLimit,
    DownloadLimited,
    Error,
    ErrorString,
    Eta,
    Files,
    FileStats,
    HashString,
    HaveUnchecked,
    HaveValid,
    HonorsSessionLimits,
    Id,
    IsPrivate,
    LastAnnounceTime,
    LastScrapeTime,
    Leechers,
    LeftUntilDone,
    ManualAnnounceTime,
    MaxConnectedPeers,
    Name,
    NextAnnounceTime,
    NextScrapeTime,
    Peer,
    Peers,
    PeersConnected,
    PeersFrom,
    PeersGettingFromUs,
    PeersKnown,
    PeersSendingToUs,
    PercentDone,
    Pieces,
    PieceCount,
    PieceSize,
    Priorities,
    RateDownload,
    RateUpload,
    RecheckProgress,
    ScrapeResponse,
    ScrapeURL,
    Seeders,
    SeedRatioLimit,
    SeedRatioMode,
    SizeWhenDone,
    StartDate,
    Status,
    SwarmSpeed,
    TimesCompleted,
    Trackers,
    TotalSize,
    TorrentFile,
    UploadedEver,
    UploadLimit,
    UploadLimited,
    UploadRatio,
    Wanted,
    Webseeds,
    WebseedsSendingToUs,
}

impl Field {
    /// A convinience function that returns a list with every field.
    fn all() -> Vec<Field> {
        vec![
            Field::ActivityDate,
            Field::AddedDate,
            Field::AnnounceResponse,
            Field::AnnounceURL,
            Field::BandwidthPriority,
            Field::Comment,
            Field::CorruptEver,
            Field::Creator,
            Field::DateCreated,
            Field::DesiredAvailable,
            Field::DoneDate,
            Field::DownloadDir,
            Field::DownloadedEver,
            Field::Downloaders,
            Field::DownloadLimit,
            Field::DownloadLimited,
            Field::Error,
            Field::ErrorString,
            Field::Eta,
            Field::Files,
            Field::FileStats,
            Field::HashString,
            Field::HaveUnchecked,
            Field::HaveValid,
            Field::HonorsSessionLimits,
            Field::Id,
            Field::IsPrivate,
            Field::LastAnnounceTime,
            Field::LastScrapeTime,
            Field::Leechers,
            Field::LeftUntilDone,
            Field::ManualAnnounceTime,
            Field::MaxConnectedPeers,
            Field::Name,
            Field::NextAnnounceTime,
            Field::NextScrapeTime,
            Field::Peer,
            Field::Peers,
            Field::PeersConnected,
            Field::PeersFrom,
            Field::PeersGettingFromUs,
            Field::PeersKnown,
            Field::PeersSendingToUs,
            Field::PercentDone,
            Field::Pieces,
            Field::PieceCount,
            Field::PieceSize,
            Field::Priorities,
            Field::RateDownload,
            Field::RateUpload,
            Field::RecheckProgress,
            Field::ScrapeResponse,
            Field::ScrapeURL,
            Field::Seeders,
            Field::SeedRatioLimit,
            Field::SeedRatioMode,
            Field::SizeWhenDone,
            Field::StartDate,
            Field::Status,
            Field::SwarmSpeed,
            Field::TimesCompleted,
            Field::Trackers,
            Field::TotalSize,
            Field::TorrentFile,
            Field::UploadedEver,
            Field::UploadLimit,
            Field::UploadLimited,
            Field::UploadRatio,
            Field::Wanted,
            Field::Webseeds,
            Field::WebseedsSendingToUs,
        ]
    }
}

impl fmt::Display for Field {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", match self {
            &Field::ActivityDate => "activityDate",
            &Field::AddedDate => "addedDate",
            &Field::AnnounceResponse => "announceResponse",
            &Field::AnnounceURL => "announceURL",
            &Field::BandwidthPriority => "bandwidthPriority",
            &Field::Comment => "comment",
            &Field::CorruptEver => "corruptEver",
            &Field::Creator => "creator",
            &Field::DateCreated => "dateCreated",
            &Field::DesiredAvailable => "desiredAvailable",
            &Field::DoneDate => "doneDate",
            &Field::DownloadDir => "downloadDir",
            &Field::DownloadedEver => "downloadedEver",
            &Field::Downloaders => "downloaders",
            &Field::DownloadLimit => "downloadLimit",
            &Field::DownloadLimited => "downloadLimited",
            &Field::Error => "error",
            &Field::ErrorString => "errorString",
            &Field::Eta => "eta",
            &Field::Files => "files",
            &Field::FileStats => "fileStats",
            &Field::HashString => "hashString",
            &Field::HaveUnchecked => "haveUnchecked",
            &Field::HaveValid => "haveValid",
            &Field::HonorsSessionLimits => "honorsSessionLimits",
            &Field::Id => "id",
            &Field::IsPrivate => "isPrivate",
            &Field::LastAnnounceTime => "lastAnnounceTime",
            &Field::LastScrapeTime => "lastScrapeTime",
            &Field::Leechers => "leechers",
            &Field::LeftUntilDone => "leftUntilDone",
            &Field::ManualAnnounceTime => "manualAnnounceTime",
            &Field::MaxConnectedPeers => "maxConnectedPeers",
            &Field::Name => "name",
            &Field::NextAnnounceTime => "nextAnnounceTime",
            &Field::NextScrapeTime => "nextScrapeTime",
            &Field::Peer => "peer",
            &Field::Peers => "peers",
            &Field::PeersConnected => "peersConnected",
            &Field::PeersFrom => "peersFrom",
            &Field::PeersGettingFromUs => "peersGettingFromUs",
            &Field::PeersKnown => "peersKnown",
            &Field::PeersSendingToUs => "peersSendingToUs",
            &Field::PercentDone => "percentDone",
            &Field::Pieces => "pieces",
            &Field::PieceCount => "pieceCount",
            &Field::PieceSize => "pieceSize",
            &Field::Priorities => "priorities",
            &Field::RateDownload => "rateDownload",
            &Field::RateUpload => "rateUpload",
            &Field::RecheckProgress => "recheckProgress",
            &Field::ScrapeResponse => "scrapeResponse",
            &Field::ScrapeURL => "scrapeURL",
            &Field::Seeders => "seeders",
            &Field::SeedRatioLimit => "seedRatioLimit",
            &Field::SeedRatioMode => "seedRatioMode",
            &Field::SizeWhenDone => "sizeWhenDone",
            &Field::StartDate => "startDate",
            &Field::Status => "status",
            &Field::SwarmSpeed => "swarmSpeed",
            &Field::TimesCompleted => "timesCompleted",
            &Field::Trackers => "trackers",
            &Field::TotalSize => "totalSize",
            &Field::TorrentFile => "torrentFile",
            &Field::UploadedEver => "uploadedEver",
            &Field::UploadLimit => "uploadLimit",
            &Field::UploadLimited => "uploadLimited",
            &Field::UploadRatio => "uploadRatio",
            &Field::Wanted => "wanted",
            &Field::Webseeds => "webseeds",
            &Field::WebseedsSendingToUs => "webseedsSendingToUs",
        })
    }
}

impl Serialize for Field {
    fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>
        where S: Serializer
    {
        serializer.serialize_str(&*self.to_string())
    }
}
